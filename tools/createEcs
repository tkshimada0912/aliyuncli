#!/usr/bin/perl
#
# Aliyun ECS vm startup script
# 2016.6.23 Takeshi SHIMADA <takeshi.shimada01@g.softbank.co.jp> all rights reserved
#
# command line example:
# ./createEcs --RegionId cn-beijing --ImageId centos7u0_64_40G_aliaegis_20160120.vhd --InstanceType ecs.s1.small --InternetChargeType PayByTraffic --InternetMaxBandwidthOut 20 --InternetMaxBandwidthIn 20
#
# in some region, system disk type is mandantory
# ... --IoOptimized optimized --SystemDiskCategory cloud_efficiency
#

use strict;
use Net::OpenSSH;

## check output format

my $fmt=`aliyuncli configure list |grep 'Output' | awk \'{print \$2}\' `;
chomp $fmt;
if ( $fmt ne 'json' ) {
	&printlog("Output format is not json");
	exit 1;
}

# all options send to aliyuncli cmd

my $options=join(' ',@ARGV);

# Region Id check

my $reg=`aliyuncli ecs DescribeRegions | jq -r \'.Regions.Region[].RegionId\'`;
$options=~/RegionId\s+(\S+)\s*/i;
my $region=$1;

{ my $check=0;
	for my $r (split(/\s+/,$reg)) {
		if ($r eq $region) {$check=1;last}
	}
	if ($check == 0) {
		&printlog("Assign valid region id.");
		&printlog("Regions are: ".join(",",split(/\s+/,$reg)));
	}
}

# execute create instance

my $StartTime=time();

my $instanceId=`aliyuncli ecs CreateInstance $options | jq -r '.InstanceId'`;
chomp $instanceId;

if ( $instanceId eq 'null' ) { # failed
	&printlog("Instane Creation failed. check status.");
	&printlog("CMD: aliyuncli ecs CreateInstance $options");
	exit 1;
}

&printlog("[$instanceId] Defined: $instanceId");
my $InstInfo="--RegionId $region --InstanceId $instanceId";

# assign public ip

my $ipaddr=`aliyuncli ecs AllocatePublicIpAddress $InstInfo | jq -r '.IpAddress'`;
chomp $ipaddr;

if ( $ipaddr eq 'null' ) { # failed
	&printlog("[$instanceId] Public IP address assignment failure.");
	&printlog("[$instanceId] CMD: aliyuncli ecs AllocatePublicIpAddress $InstInfo");
	exit 1;
}

&printlog("[$instanceId] public IP address: $ipaddr");

# assign root password (tempolary)

my $Password;
while (1) {
	$Password=join('',map { ("a".."z", "A".."Z", 0..9)[rand 62] }(1..16));
	if ($Password =~/[A-Z]/ && $Password =~/[a-z]/ && $Password =~/[0-9]/) {last;}
}

&printlog("[$instanceId] Root Password: $Password");

my $resp=`aliyuncli ecs ModifyInstanceAttribute --Password \"$Password\" $InstInfo | jq -r '.Code'`;

if ($resp !~/null/) { # fail
	&printlog("[$instanceId] Password setting failed.");
	exit 1;
}

# start Instance

$resp=`aliyuncli ecs StartInstance $InstInfo | jq -r '.Code'`;
if ($resp !~/null/) { # fail
	&printlog("[$instanceId] Start Instance failed.");
	exit 1;
}

# try while SSH enabled

&printlog("[$instanceId] Instance Started, waiting for SSH enabled.");

my $ssh;
for my $i (1..100) {
	$ssh=Net::OpenSSH->new( $ipaddr , ( user => 'root', password => $Password , timeout => 10, master_opts => [ -o => "StrictHostKeyChecking=no"]));
	if ($ssh->error) {&printlog("[$instanceId] ssh Retry count:$i")}
	else {last;}
}
if ($ssh->error) {
	&printlog("[$instanceId] ssh retry out.");
	exit 1;
}

# create ansible account

my $ssh_key="/root/ssh-key.pub";
my $setupcmd="./setup.sh";

open(KEY,$ssh_key);
my $SSH_KEY=<KEY>;
chomp $SSH_KEY;
close(KEY);

my @setup=();
open(SETUP,$setupcmd);
while (<SETUP>) {
	$_=~s/%%SSHKEY%%/$SSH_KEY/;
	push @setup,$_;
}
close(SETUP);

open(SETUP,">/tmp/.$$.setup");
for my $c (@setup) {print SETUP $c}
close(SETUP);

$ssh->scp_put({},"/tmp/.$$.setup","/tmp/setup.sh");
if ($ssh->error) {&printlog("[$instanceId] Setup Cmd copy fail");exit 1;}
unlink("/tmp/.$$.setup");

my @resp=$ssh->capture("/bin/sh /tmp/setup.sh");
&printlog(map {chomp;"[$instanceId] setupcmd output:$_"} @resp);

open(HOSTS,">>hosts");
print HOSTS "$ipaddr\n";
close(HOSTS);

my $EndTime=time();

my $mins=int(($EndTime-$StartTime)/60);
my $secs=int(($EndTime-$StartTime)%60);

&printlog("[$instanceId] Server Startup finished. dur ".sprintf("%d:%02d",$mins,$secs));

exit 0;

sub printlog {
	my @logs=@_;
	for my $l (@logs) {
		print localtime()." ".$l."\n";
	}
}
